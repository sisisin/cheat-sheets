cheatsheet
コマンドの説明とか書いてます。

コマンドについての説明のフォーマットはこんな感じです
-------------------------
[コマンド] <引数>	解説
	[コマンドライン引数]	解説
-------------------------



clone <url> [dir]	urlで指定したリポジトリをローカルへクローンする
									dirで指定したディレクトリ名でクローンすることが可能

log	履歴を確認する
	--stat					変更されたファイルの一覧と数、追加・削除された行数を表示。 また、それらの情報のまとめを最後に出力
	-p							変更内容のdiffを表示
	-(number)				指定した数字分の履歴を出力
	--pretty				出力形式を変更する
										例：----------------------------------
										--pretty=online
										--pretty=format:"%h - %an, %ar : %s"
										--pretty=format:"%h %s" --graph
										-------------------------------------
	--shortstat			--stat コマンドのうち、変更/追加/削除 の行だけを表示する
	--name-only			コミット情報の後に変更されたファイルの一覧を表示する
	--name-status		変更されたファイルと 追加/修正/削除 情報を表示する
	--abbrev-commit	SHA-1 チェックサムの全体 (40文字) ではなく最初の数文字のみを表示する
	--relative-date	完全な日付フォーマットではなく、相対フォーマット (“2 weeks ago” など) で日付を表示する

add	ファイルをステージする
	-A	新規作成・修正済み・削除ファイルを全てステージする

status	リポジトリの状態を確認する
	-s	ファイル名のみの情報を出力する

commit	ステージ済みファイルをコミットする
	-m	コミットメッセージを指定してコミット
	-a	修正済みファイルを全てステージしたものとみなしてコミット
	--amend	現在のステージ済みファイルで一個前のコミットをやり直す

rm	削除されたファイルをステージする
	--cached <file> fileの実体を削除せずに、Gitリポジトリ上では削除したものとしてステージする
	
mv <file_from> <file_to>	file_fromからfile_toへファイルの移動をおこなう

reset	<file>	fileをステージ済み状態から修正済み状態にする。
※resetコマンドはインデックスやHEADなど、リポジトリの状態のポインタを操作するもので、用途は多数あります。
これ以上のコマンドはここに書いちゃうと事故の元のような気しかしないので省きます
 
checkout <file> fileを修正済み状態から最終コミットの状態に戻す。

remote	リモートリポジトリを表示したりする
	-v	リモートリポジトリをURL込みで表示する
	add <remote_name> <remote_url> remote_nameという名称でremote_urlをリモートリポジトリとして登録する
	show	リモートリポジトリの情報を取得する

fetch	リモートとローカルのリポジトリを同期させる

pull	現在のローカルブランチに追跡先ブランチの最新のものをマージする。要はリモートを取得する

push	現在のローカルブランチを追跡先ブランチの最新のものへマージして反映させる。要はリモートへ反映させる。
	-u <remote_name> <branch_name>	remote_nameのbranch_nameブランチを現在のブランチの追跡先ブランチとして設定する
